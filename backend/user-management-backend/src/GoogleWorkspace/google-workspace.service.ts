import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { google, Auth } from 'googleapis';
import axios, { AxiosRequestConfig } from 'axios';

@Injectable()
export class GoogleWorkspaceService {
  private oauth2Client: Auth.OAuth2Client;
  private adminApiUrl = 'https://admin.googleapis.com/admin/directory/v1';
  private currentData: {
    accessToken: string;
    refreshToken: string;
    expiryDate: number;
  } | null = null; // Using currentData instead of Repository

  constructor() {
    this.oauth2Client = new google.auth.OAuth2(
      process.env.GWS_CLIENT_ID,
      process.env.GWS_CLIENT_SECRET,
      process.env.GWS_REDIRECT_URI,
    );
  }

  // Generate Google OAuth consent URL
  getAuthUrl(): string {
    const scopes = [
      'https://www.googleapis.com/auth/admin.directory.user',
      'https://www.googleapis.com/auth/admin.directory.group',
      'https://www.googleapis.com/auth/admin.directory.group.member',
    ];

    return this.oauth2Client.generateAuthUrl({
      access_type: 'offline',
      prompt: 'consent',
      scope: scopes,
    });
  }

  // Exchange authorization code for tokens and store in currentData
  async exchangeCodeForTokens(code: string) {
    try {
      const { tokens } = await this.oauth2Client.getToken(code);
      if (!tokens.refresh_token) {
        throw new Error('No refresh token provided. Ensure "access_type=offline" is set.');
      }

      this.oauth2Client.setCredentials(tokens);
      this.currentData = {
        accessToken: tokens.access_token,
        refreshToken: tokens.refresh_token,
        expiryDate: tokens.expiry_date || Date.now() + 3600 * 1000, // Default expiry: 1 hour
      };

      console.log('Tokens stored in currentData:', this.currentData);

      return this.currentData;
    } catch (error) {
      console.error('Error exchanging code for tokens:', error.message);
      throw new HttpException('Failed to exchange authorization code for tokens.', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // Refresh access token if expired
  private async getAccessToken(): Promise<string> {
    if (!this.currentData) {
      throw new HttpException('No tokens available. Please log in.', HttpStatus.UNAUTHORIZED);
    }

    const currentTime = Date.now();
    if (this.currentData.expiryDate && currentTime < this.currentData.expiryDate - 60000) {
      // Token is valid
      return this.currentData.accessToken;
    }

    if (!this.currentData.refreshToken) {
      throw new HttpException(
        { message: 'Token expired and no refresh token available.', redirectToAuth: true },
        HttpStatus.UNAUTHORIZED,
      );
    }

    try {
      this.oauth2Client.setCredentials({ refresh_token: this.currentData.refreshToken });
      const { credentials } = await this.oauth2Client.refreshAccessToken();

      this.currentData.accessToken = credentials.access_token;
      this.currentData.expiryDate = credentials.expiry_date || Date.now() + 3600 * 1000;

      console.log('Access token refreshed and updated in currentData.');

      return this.currentData.accessToken;
    } catch (error) {
      console.error('Error refreshing access token:', error.message);
      throw new HttpException('Failed to refresh access token.', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }
  isLoggedIn(): boolean {
    return !!this.currentData && !!this.currentData.accessToken;
  }
  
  // Helper to make authorized API requests
  private async makeAuthorizedRequest(config: AxiosRequestConfig) {
    const token = await this.getAccessToken();

    config.headers = {
      ...config.headers,
      Authorization: `Bearer ${token}`,
      'Content-Type': 'application/json',
    };

    try {
      const response = await axios(config);
      return response.data;
    } catch (error) {
      console.error('Google Workspace API Error:', error.response?.data || error.message);
      throw new HttpException(
        error.response?.data?.error?.message || 'Google Workspace API request failed.',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // Create a new user in Google Workspace
 
  async createUser(userData: { email: string; firstName: string; lastName: string }) {
    const generatedPassword = this.generateStrongPassword();
  
    const requestData = {
      primaryEmail: userData.email,
      name: {
        givenName: userData.firstName,
        familyName: userData.lastName,
      },
      password: generatedPassword,
      orgUnitPath: '/', // Default org unit
    };
  
    const config: AxiosRequestConfig = {
      method: 'POST',
      url: `${this.adminApiUrl}/users`,
      data: requestData,
    };
  
    console.log(`Creating user with autogenerated password: ${generatedPassword}`);
    return await this.makeAuthorizedRequest(config);
  }
  
  private generateStrongPassword(): string {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+';
    const length = 12; // Adjust based on Google Workspace policy
    let password = '';
    for (let i = 0; i < length; i++) {
      const randomIndex = Math.floor(Math.random() * charset.length);
      password += charset[randomIndex];
    }
    return password;
  }
  
  // Create a Google Workspace group
  async createGroup(groupData: { email: string; name: string; description?: string }) {
    // Ensure email and name are included
    if (!groupData.email || !groupData.name) {
      throw new Error('Missing required fields: email and name are required to create a group.');
    }
  
    const requestData = {
      email: groupData.email,
      name: groupData.name,
      description: groupData.description || '', // Optional description
    };
  
    const config: AxiosRequestConfig = {
      method: 'POST',
      url: `${this.adminApiUrl}/groups`,
      data: requestData,
    };
  
    console.log(`Creating group with email: ${groupData.email} and name: ${groupData.name}`);
    return await this.makeAuthorizedRequest(config);
  }
  

  async addUserToGroup(userEmail: string, groupEmail: string) {
    const accessToken = await this.getAccessToken(); // Ensure a valid token is retrieved
    const url = `https://admin.googleapis.com/admin/directory/v1/groups/${groupEmail}/members`;
  
    const payload = {
      email: userEmail, // User's email address
      role: 'MEMBER',   // User's role in the group
    };
  
    try {
      const response = await axios.post(url, payload, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      });
      console.log(`User added to group: ${response.data}`);
      return response.data;
    } catch (error) {
      console.error('Error adding user to group:', error.response?.data || error.message);
      throw new Error(error.response?.data?.error?.message || 'Failed to add user to group');
    }
  }
  async removeUserFromGroup(userEmail: string, groupEmail: string) {
    console.log('Starting to remove user from group...');
    console.log('User Email:', userEmail);
    console.log('Group Email:', groupEmail);
  
    const accessToken = await this.getAccessToken();
    console.log('Access Token:', accessToken);
  
    const url = `https://admin.googleapis.com/admin/directory/v1/groups/${groupEmail}/members/${userEmail}`;
    console.log('API URL:', url);
  
    try {
      const response = await axios.delete(url, {
        headers: {
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'application/json',
        },
      });
      console.log(`User removed from group. Status Code: ${response.status}`);
      return { message: 'User removed from group successfully' };
    } catch (error) {
      console.error('Error removing user from group:', error.response?.data || error.message);
      const errorMessage = error.response?.data?.error?.message || 'Failed to remove user from group';
      console.error('Detailed Error:', errorMessage);
      throw new Error(errorMessage);
    }
  }
 
}  